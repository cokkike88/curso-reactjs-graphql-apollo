type Client {
    id: ID
    name: String
    lastName: String
    company: String
    emails: [Email]
    age: Int
    type: ClientType
    orders: [Order]
}
type Order {
    product: String
    price: Float
}
type Email {
    email: String
}
enum ClientType {
    BASIC
    PREMIUM
}
type Query {
    getClients(limit: Int, offset: Int): [Client]
    getClient(id: ID): Client
    totalClients: String
    #Products
    getProducts(limit: Int, offset:Int): [Product]
    getProduct(id: ID): Product
    totalProducts: String
}
input InputOrder {
    product: String
    price: Float
}
input InputEmail {
    email: String
}
""" Campos para los clientes nuevos """
input InputClient {
    id: ID
    name: String!
    lastName: String!
    company: String!
    emails: [InputEmail]
    age: Int!
    type: ClientType!
    orders: [InputOrder]
}

""" PRODUCTS """
type Product {
    id: ID
    name: String
    price: Float
    stock: Int
}

""" Campos para los productos nuevos """
input InputProduct {
    id: ID
    name: String!
    price: Float!
    stock: Int!
}
""" Mutation para crear nuevos clientes """
type Mutation {      
    # Nombre del resolver, Input con datos y valor que retorna  
    """ Permite crear nuevos clientes """
    addClient(input: InputClient): Client
    updateClient(input: InputClient): Client
    deleteClient(id: ID!) : String
    addProduct(input: InputProduct) : Product
    updateProduct(input: InputProduct): Product
    deleteProduct(id: ID!): String
}