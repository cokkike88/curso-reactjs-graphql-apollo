type Client {
    id: ID
    name: String
    lastName: String
    company: String
    emails: [Email]
    age: Int
    type: ClientType
}
type TopClient {
    total: Float
    client: [Client]
}
type TopSeller {
    total: Float
    seller: [User]
}
type Email {
    email: String
}
enum ClientType {
    BASIC
    PREMIUM
}
type Query {
    getClients(limit: Int, offset: Int, sellerId: String): [Client]
    getClient(id: ID): Client
    totalClients(sellerId: String): String
    #Products
    getProducts(limit: Int, offset:Int, stock:Boolean): [Product]
    getProduct(id: ID): Product
    totalProducts: String
    #Orders
    getOrders(clientId: String): [Order]
    topClients: [TopClient]
    topSellers: [TopSeller]
    #Users
    getUser: User
}
input InputEmail {
    email: String
}
""" Campos para los clientes nuevos """
input InputClient {
    id: ID
    name: String!
    lastName: String!
    company: String!
    emails: [InputEmail]
    age: Int!
    type: ClientType!,
    sellerId: ID
}

""" ============================================================ PRODUCTS """
type Product {
    id: ID
    name: String
    price: Float
    stock: Int
}

""" Campos para los productos nuevos """
input InputProduct {
    id: ID
    name: String!
    price: Float!
    stock: Int!
}
""" ============================================================ ORDERS """
type Order {
    id:ID
    orders: [OrderProduct]
    total: Float
    date: String
    client: ID
    status: OrderStatus
}

type OrderProduct {
    id: ID,
    quantity: Int
}

input InputOrder {
    id:ID
    orders: [InputOrderProduct]
    total: Float
    date: String
    client: ID
    status: OrderStatus,
    sellerId: ID
}

input InputOrderProduct {
    id: ID,
    quantity: Int
}

enum OrderStatus {
    PENDING
    COMPLETED
    CANCELED
}

""" ============================================================ SECURITY """
type Token {
    token: String
}

type User {
    id: ID,
    user: String,
    name: String,
    role: String
}

type Mutation {      
    # Nombre del resolver, Input con datos y valor que retorna  
    """ Permite crear nuevos clientes """
    # CLIENTS
    addClient(input: InputClient): Client
    updateClient(input: InputClient): Client
    deleteClient(id: ID!) : String
    # PRODUCTS
    addProduct(input: InputProduct) : Product
    updateProduct(input: InputProduct): Product
    deleteProduct(id: ID!): String
    # ORDERS
    addOrder(input: InputOrder) : Order
    updateOrderStatus(input: InputOrder): String
    # USERS
    createUser(user: String!, name: String, pass: String!, role: String): String
    authUser(user: String!, pass: String!): Token
}